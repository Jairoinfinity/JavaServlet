/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2019-01-31 09:16:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import es.studium.LibreriaMVC.*;

public final class order_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("es.studium.LibreriaMVC");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//ES\"\r\n");
      out.write("\"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Pedido</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>Librería MVC</h1>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t<strong>Elegir un libro y la cantidad:</strong>\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<form name=\"AgregarForm\" action=\"shopping\" method=\"POST\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"todo\" value=\"add\"> Título: <select\r\n");
      out.write("\t\t\tname=\"idLibro\">\r\n");
      out.write("\t\t\t");

				// Scriplet 1: Carga los libros en el SELECT
				for (int i = 0; i < LibrosMVC.tamano(); i++) {
					out.println("<option value='" + i + "'>");
					out.println(LibrosMVC.getTitulo(i) + " | " + LibrosMVC.getAutor(i) + " | " + LibrosMVC.getPrecio(i));
					out.println("</option>");
				}
			
      out.write("\r\n");
      out.write("\t\t</select> Cantidad: <input type=\"text\" name=\"cantidad\" size=\"10\" value=\"1\">\r\n");
      out.write("\t\t<input type=\"submit\" value=\"Añadir a la cesta\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<br />\r\n");
      out.write("\t");

		// Scriplet 2: Chequea el contenido de la cesta
		List<ElementoPedido> cesta = (List<ElementoPedido>) session.getAttribute("carrito");
		if (cesta != null && cesta.size() > 0) {
	
      out.write("\r\n");
      out.write("\t<p>\r\n");
      out.write("\t\t<strong>Tu cesta contiene:</strong>\r\n");
      out.write("\t</p>\r\n");
      out.write("\t<table border=\"1\" cellspacing=\"0\" cellpadding=\"5\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>Título</th>\r\n");
      out.write("\t\t\t<th>Autor</th>\r\n");
      out.write("\t\t\t<th>Precio</th>\r\n");
      out.write("\t\t\t<th>Cantidad</th>\r\n");
      out.write("\t\t\t<th>&nbsp;</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

			// Scriplet 3: Muestra los libros del carrito
				for (int i = 0; i < cesta.size(); i++) {
					ElementoPedido elementoPedido = cesta.get(i);
		
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<form name=\"borrarForm\" action=\"shopping\" method=\"POST\">\r\n");
      out.write("\t\t\t\t<input type=\"hidden\" name=\"todo\" value=\"remove\"> <input\r\n");
      out.write("\t\t\t\t\ttype=\"hidden\" name=\"indiceElemento\" value=\"");
      out.print(i);
      out.write("\">\r\n");
      out.write("\t\t\t\t<td>");
      out.print(elementoPedido.getTitulo());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td>");
      out.print(elementoPedido.getAutor());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td align=\"right\">");
      out.print(elementoPedido.getPrecio());
      out.write(" €</td>\r\n");
      out.write("\t\t\t\t<td align=\"right\">");
      out.print(elementoPedido.getCantidad());
      out.write("</td>\r\n");
      out.write("\t\t\t\t<td><input type=\"submit\" value=\"Eliminar de la\r\n");
      out.write("cesta\"></td>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<form name=\"checkoutForm\" action=\"shopping\" method=\"POST\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"todo\" value=\"checkout\"> <input\r\n");
      out.write("\t\t\ttype=\"submit\" value=\"Confirmar compra\">\r\n");
      out.write("\t</form>\r\n");
      out.write("\t");

}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
