/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2019-01-31 07:58:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class consulta_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//ES\"\r\n");
      out.write("\"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF8\">\r\n");
      out.write("<title>Consulta de Libros</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>Consulta de Libros</h1>\r\n");
      out.write("\t<h3>Elige libro(s) a consultar:</h3>\r\n");
      out.write("\t<form method=\"get\">\r\n");
      out.write("\t\t<input type=\"checkbox\" name=\"libro\" value=\"1\" />1 <input\r\n");
      out.write("\t\t\ttype=\"checkbox\" name=\"libro\" value=\"2\" />2 <input type=\"submit\"\r\n");
      out.write("\t\t\tvalue=\"Buscar...\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\t");

String[] libros = request.getParameterValues("libro");
if(libros!=null)
{

      out.write("\r\n");
      out.write("\t\r\n");
      out.write("\t");

// Paso 1: Cargamos el driver
Class.forName("com.mysql.jdbc.Driver");
// Paso 2: Conectarse a la base de datos utilizando un objeto de la clase Connection
String userName = "root";
String password = "";
// URL de la base de datos
String url = "jdbc:mysql://localhost:3306/tiendalibros";
Connection conn = DriverManager.getConnection(url,
userName, password);
// Paso 3: Crear las sentencias SQL utilizando objetos de la clase Statement
Statement stmt = conn.createStatement();
// Paso 4: Ejecutar las sentencias
String sqlStr = "SELECT * FROM libros WHERE ";
for(int i = 0; i < libros.length;i++)
{
sqlStr = sqlStr + "idlibros = " + libros[i] + " ";
if(i!=libros.length-1)
{
sqlStr += "OR ";
}
}
sqlStr += "ORDER by precioLibro DESC";
System.out.println(sqlStr);
ResultSet rs = stmt.executeQuery(sqlStr);

      out.write("\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<table border=1 cellpadding=5>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>Autor</th>\r\n");
      out.write("\t\t\t<th>TÃ­tulo</th>\r\n");
      out.write("\t\t\t<th>Precio</th>\r\n");
      out.write("\t\t\t<th>Cantidad</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

// Paso 5: Recoger los resultados y procesarlos
while(rs.next())
{

      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>");
      out.print(rs.getString("autorLibro"));
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(rs.getString("tituloLibro"));
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(rs.getString("precioLibro"));
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(rs.getString("cantidadLibro"));
      out.write("</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

}

      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\t");
 // Cierre de recursos
rs.close();
stmt.close();
conn.close();
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
